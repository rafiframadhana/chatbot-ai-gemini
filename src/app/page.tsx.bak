"use client";

import React, { memo, useEffect, useRef, useState } from "react";
import { askQuestion } from "@/ai/flows/query-knowledge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useIsMobile } from "@/hooks/use-mobile";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components            <div 
              className={`fixed bottom-40 right-2 transition-all duration-200 ${
                isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4 pointer-events-none"
              }`}
            >
              <button
                onClick={scrollToBottom} 
                className="p-3 rounded-full bg-gray-700 hover:bg-gray-600 text-white shadow-lg z-50 transition-colors"
                aria-label="Scroll to bottom"
              >
                <ChevronDownIcon className="h-5 w-5" />
              </button>
            </div>
import { Icons } from "@/components/icons";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Toaster } from "@/components/ui/toaster";
import { useToast } from "@/hooks/use-toast";
import { TypingEffect } from "@/components/ui/typing-effect";
import MarkdownToJSX from "markdown-to-jsx";
import { ChevronDownIcon, ChevronLeft, ChevronRight } from "lucide-react";
import ReactMarkdown from "react-markdown";
import AddCommentIcon from "@mui/icons-material/AddComment";
import Tooltip from "@mui/material/Tooltip";

type Message = {
  id: string;
  role: "user" | "assistant";
  content: string;
};

const ChatMessage = ({ role, content }: Pick<Message, "role" | "content">) => (
  <div
    className={`rounded-lg p-3 my-1 max-w-xs ${
      role === "user"
        ? "bg-secondary text-foreground self-end"
        : "bg-accent text-accent-foreground self-start"
    }`}
  >
    <MarkdownToJSX>{content}</MarkdownToJSX>
  </div>
);

const ChatInterface = () => {
  const isMobile = useIsMobile();
  const [hasError, setHasError] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const chatWindowRef = useRef<HTMLDivElement>(null);
  const suggestedMessagesContainerRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const [animatedMessageIds, setAnimatedMessageIds] = useState(
    new Set<string>()
  );
  const imageUrl = "https://avatars.githubusercontent.com/rafiframadhana";

  const clearMessages = () => {
    setMessages([]);
    setAnimatedMessageIds(new Set());
  };

  // Scroll position management
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const viewport = chatWindowRef.current?.querySelector(
        "[data-radix-scroll-area-viewport]"
      );
      if (!viewport) return;

      const { scrollTop, scrollHeight, clientHeight } = viewport;
      const distanceFromBottom = scrollHeight - scrollTop - clientHeight;

      // Show button if we're more than 100px from bottom
      setIsVisible(distanceFromBottom > 100);
    };

    const viewport = chatWindowRef.current?.querySelector(
      "[data-radix-scroll-area-viewport]"
    );
    if (viewport) {
      viewport.addEventListener("scroll", handleScroll);
      handleScroll(); // Check initial position
    }

    // Handle window resize
    window.addEventListener("resize", handleScroll);

    return () => {
      if (viewport) {
        viewport.removeEventListener("scroll", handleScroll);
      }
      window.removeEventListener("resize", handleScroll);
    };
  }, []); // Empty dependency array since we use refs

  const scrollToBottom = () => {
    const viewport = chatWindowRef.current?.querySelector(
      "[data-radix-scroll-area-viewport]"
    );
    if (viewport) {
      viewport.scrollTo({
        top: viewport.scrollHeight,
        behavior: "smooth",
      });
    }
  };

  // Scroll to bottom on new messages
  useEffect(() => {
    if (messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.role === "assistant" && !isTyping) {
        scrollToBottom();
      } else if (lastMessage.role === "user") {
        scrollToBottom();
      }
    }
  }, [messages, isTyping]);

  // Add intro message when component mounts
  useEffect(() => {
    const timer = setTimeout(() => {
      if (messages.length === 0) {
        const introMessage: Message = {
          id: Date.now().toString(),
          role: "assistant",
          content: "Hi! Rafif's here. How can I help you?",
        };
        setMessages([introMessage]);
      }
    }, 500);
    return () => clearTimeout(timer);
  }, [messages.length]);

  const suggestedMessages = [
    "Tell me about yourself.",
    "What projects have you worked on?",
    "Tell me about your skills.",
    "What is your work experience?",
    "What is your education background?",
    "What are your interests?",
    "Where are you located?",
  ];

  const handleSuggestedMessageClick = async (message: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: message,
    };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setIsLoading(true);
    // Scroll to bottom when user clicks a suggested message
    setTimeout(scrollToBottom, 100);
    try {
      const aiResponse = await askQuestion({ question: message });
      const aiMessage: Message = {
        id: Date.now().toString(),
        role: "assistant",
        content: aiResponse.answer,
      };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);
      setHasError(false);
    } catch (error) {
      console.error("Failed to get AI response:", error);
      setHasError(true);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to get AI response.",
      });
    } finally {
      setIsLoading(false);
      setInput("");
    }
  };

  const scrollSuggestedMessages = (direction: "left" | "right") => {
    const container = suggestedMessagesContainerRef.current;
    if (container) {
      const scrollAmount = direction === "left" ? -200 : 200;
      container.scrollBy({ left: scrollAmount, behavior: "smooth" });
    }
  };

  const markdownComponents = {
    p: ({ node, ...props }: { node?: any; [key: string]: any }) => {
      const content = props.children?.toString()?.trim();
      if (!content) return null;
      return <p className="text-[16px] mb-3 last:mb-0" {...props} />;
    },
    ul: ({ node, ...props }: { node?: any; [key: string]: any }) => (
      <ul className="mb-3 text-[16px]" {...props} />
    ),
    li: ({
      node,
      children,
      ...props
    }: {
      node?: any;
      children?: React.ReactNode;
    }) => (
      <li className="text-[16px] flex items-start gap-2 mb-1" {...props}>
        <span className="select-none mt-[2px]">•</span>
        <span>{children}</span>
      </li>
    ),
    h2: ({ node, ...props }: { node?: any; [key: string]: any }) => (
      <h2 className="text-[16px] font-semibold" {...props} />
    ),
    h3: ({ node, ...props }: { node?: any; [key: string]: any }) => (
      <h3 className="text-[16px]" {...props} />
    ),
    a: ({
      node,
      href,
      children,
      ...props
    }: {
      node?: any;
      href?: string;
      children?: React.ReactNode;
    }) => {
      if (!href) return null;
      return (
        <a
          href={href}
          target="_blank"
          rel="noopener noreferrer"
          className="text-blue-500 underline hover:text-blue-600"
          {...props}
        >
          {children}
        </a>
      );
    },
  };

  const formatMessage = (content: string) => {
    return content
      .trim()
      .replace(/\n{3,}/g, "\n\n")
      .replace(/\n\s+/g, "\n")
      .replace(/^[-*]\s/gm, "• ");
  };
  const MessageContent = memo(({ message }: { message: Message }) => {
    const isLatestAssistantMessage =
      message.role === "assistant" &&
      messages[messages.length - 1]?.id === message.id;

    const previouslyAnimated = animatedMessageIds.has(message.id);
    const shouldAnimate = isLatestAssistantMessage && !previouslyAnimated;
    const [isTypingComplete, setIsTypingComplete] = useState(false);

    useEffect(() => {
      if (shouldAnimate) {
        setIsTyping(true);
      }
    }, [shouldAnimate]);

    if (shouldAnimate && !isTypingComplete) {
      return (
        <TypingEffect
          key={message.id}
          text={formatMessage(message.content || "")}
          speed={15}
          onComplete={() => {
            setAnimatedMessageIds(new Set([...animatedMessageIds, message.id]));
            setIsTyping(false);
            setIsTypingComplete(true);
          }}
        />
      );
    }

    return (
      <ReactMarkdown components={markdownComponents}>
        {formatMessage(message.content || "")}
      </ReactMarkdown>
    );
  });

  MessageContent.displayName = "MessageContent";

  return (
    <div className="fixed inset-0 flex flex-col bg-black">
      <Toaster />{" "}
      <Card className="w-full flex-1 bg-black text-white border-0 overflow-hidden">
        <CardContent className="p-0 flex flex-col h-full overflow-hidden">
          {/* Header */}
          <div className="border-b border-gray-700 p-4 flex items-center justify-between bg-zinc-900">
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Avatar>
                  <AvatarImage src={imageUrl} alt="Rafif Ramadhana" />
                  <AvatarFallback>RR</AvatarFallback>
                </Avatar>
                <span className="absolute bottom-[2px] right-[-2px] flex h-[12px] w-[12px]">
                  <span
                    className={`absolute inline-flex h-full w-full animate-ping rounded-full ${
                      hasError ? "bg-red-400" : "bg-green-400"
                    } opacity-75`}
                  ></span>
                  <span
                    className={`relative inline-flex rounded-full h-[12px] w-[12px] ${
                      hasError ? "bg-red-500" : "bg-green-500"
                    } border-2 border-black shadow-md`}
                  ></span>
                </span>
              </div>
              <div>
                <h5 className="font-semibold text-center">Rafif's AI</h5>
              </div>
            </div>
            <div className="flex items-center">
              <Tooltip title="New Chat" arrow>
                <button onClick={clearMessages} className="text-white mr-2">
                  <AddCommentIcon sx={{ fontSize: 23 }} />
                </button>
              </Tooltip>
            </div>
          </div>{" "}
          {/* Chat Messages */}{" "}          <ScrollArea
            ref={chatWindowRef}
            className="flex-1 min-h-0 px-4 pt-4 bg-black scrollbar-hide relative"
          >
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex ${
                  message.role === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {message.role === "assistant" && (
                  <div className="flex flex-col justify-end">
                    <Avatar className="mr-2 w-8 h-8 flex items-center justify-center mb-4">
                      <AvatarImage src={imageUrl} alt="Rafif Ramadhana" />
                      <AvatarFallback>RR</AvatarFallback>
                    </Avatar>
                  </div>
                )}
                <div
                  className={`px-5 py-4 max-w-[85%] rounded-xl shadow-md mb-4 ${
                    message.role === "user"
                      ? "bg-blue-600 text-gray-100 rounded-[20px] rounded-r last:rounded-tr first:rounded-tr-[20px] only:rounded-tr-[20px] first:rounded-br only:rounded-br last:rounded-br-[20px]"
                      : "bg-gray-800 text-gray-100 rounded-[20px] rounded-l only:rounded-[20px] last:rounded-bl first:rounded-bl-[20px] first:rounded-tl only:rounded-tl last:rounded-tl-[20px]"
                  }`}
                >
                  <div className="markdown-message text-[16px] leading-relaxed">
                    <MessageContent message={message} />
                  </div>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex justify-start">
                <div className="flex flex-col justify-end">
                  <Avatar className="mr-2 w-8 h-8 flex items-center justify-center mb-4">
                    <AvatarImage src={imageUrl} alt="Rafif Ramadhana" />
                    <AvatarFallback>RR</AvatarFallback>
                  </Avatar>
                </div>

                <div className="px-5 py-4 max-w-[85%] shadow-md mb-4 bg-gray-800 text-white rounded-[20px] rounded-l only:rounded-[20px] last:rounded-bl first:rounded-bl-[20px] first:rounded-tl only:rounded-tl last:rounded-tl-[20px]">
                  <div className="chat-loader"></div>
                </div>
              </div>
            )}

            {isVisible && (
              <button
                onClick={scrollToBottom}
                className="fixed bottom-40 right-2 p-3 rounded-full bg-gray-700 text-white shadow-lg z-50"
                style={{ display: isVisible ? "block" : "none" }}
                aria-label="Scroll to bottom"
              >
                <ChevronDownIcon />
              </button>
            )}

            {/* <button
              onClick={scrollToBottom}
              className="fixed bottom-40 right-2 p-3 rounded-full bg-gray-700 text-white shadow-lg z-50"
              aria-label="Scroll to bottom"
            >
              <ChevronDownIcon />
            </button> */}
          </ScrollArea>
          {/* Suggested Messages */}{" "}
          <div className="shrink-0 p-4 border-t border-gray-700 relative group">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => scrollSuggestedMessages("left")}
              className="absolute left-0 top-1/2 transform -translate-y-1/2 bg-zinc-800/80 hover:bg-zinc-800 rounded-full z-10 opacity-0 group-hover:opacity-100 transition-opacity"
              style={{ marginLeft: "4px" }}
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>

            <div
              ref={suggestedMessagesContainerRef}
              className="w-full overflow-x-auto scrollbar-hide"
              style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
            >
              <div className="flex flex-row space-x-3 whitespace-nowrap">
                {suggestedMessages.map((msg, idx) => (
                  <span
                    key={idx}
                    onClick={() => handleSuggestedMessageClick(msg)}
                    className="cursor-pointer bg-gray-700 px-4 py-2 rounded-full hover:bg-gray-600 transition text-sm text-white"
                  >
                    {msg}
                  </span>
                ))}
              </div>
            </div>

            <Button
              variant="ghost"
              size="icon"
              onClick={() => scrollSuggestedMessages("right")}
              className="absolute right-0 top-1/2 transform -translate-y-1/2 bg-zinc-800/80 hover:bg-zinc-800 rounded-full z-10 opacity-0 group-hover:opacity-100 transition-opacity"
              style={{ marginRight: "4px" }}
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
          {/* Input Area */}{" "}
          <div className="shrink-0 p-4 flex items-center space-x-2 border-t border-gray-700 bg-zinc-900">
            <Input
              type="text"
              placeholder="Ask me anything..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className="flex-grow rounded-lg bg-gray-800 text-white border-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
              onKeyDown={(e) =>
                e.key === "Enter" && !isLoading && !isTyping && sendMessage()
              }
              disabled={isLoading || isTyping}
            />
            <Button
              onClick={sendMessage}
              className="rounded-lg bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={isLoading || isTyping || !input.trim()}
            >
              {isLoading ? (
                <Icons.loader className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Icons.send className="h-4 w-4" />
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ChatInterface;
